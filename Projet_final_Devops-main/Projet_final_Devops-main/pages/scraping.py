from flask import Blueprint, render_template, request, jsonify
import pandas as pd
from scraper import scrape_expat_dakar
import os

scraping_bp = Blueprint('scraping', __name__)

URLS = {
    "Appartements Ã  louer": "https://www.expat-dakar.com/appartements-a-louer",
    "Appartements meublÃ©s": "https://www.expat-dakar.com/appartements-meubles",
    "Terrains Ã  vendre": "https://www.expat-dakar.com/terrains-a-vendre"
}

# âœ… Route pour afficher la page scraping
@scraping_bp.route('/scraping', methods=['GET'])
def show_scraping_page():
    return render_template('scraping.html', categories=URLS.keys())

# âœ… Route qui lance le scraping et renvoie les rÃ©sultats
@scraping_bp.route('/scrape', methods=['POST'])
def run_scraping():
    data = request.get_json()
    category = data.get("category")
    max_pages = int(data.get("max_pages", 5))

    if category not in URLS:
        return jsonify({"success": False, "message": "CatÃ©gorie invalide."})

    try:
        # ðŸ“Œ Lancement du scraping
        df = scrape_expat_dakar(URLS[category], max_pages)

        if df.empty:
            return jsonify({"success": False, "message": "Aucune annonce trouvÃ©e."})

        # ðŸ“Œ Sauvegarde dans le dossier static
        csv_filename = f"static/{category.replace(' ', '_')}.csv"
        df.to_csv(csv_filename, index=False)

        # ðŸ“Œ RÃ©ponse JSON avec les rÃ©sultats et le lien de tÃ©lÃ©chargement
        return jsonify({
            "success": True,
            "message": f"{len(df)} annonces rÃ©cupÃ©rÃ©es.",
            "annonces": df.to_dict(orient="records"),
            "csv_filename": csv_filename
        })

    except Exception as e:
        return jsonify({"success": False, "message": f"Erreur lors du scraping : {str(e)}"})
